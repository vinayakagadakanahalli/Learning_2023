1.#include <stdio.h>
#include <stdlib.h>
#include <string.h>

unsigned long compute_total_seconds(const char* time_string) {
  char* token;
  char* remainder;
  unsigned long hours, minutes, seconds;

  char* time_copy = strdup(time_string);  
  token = strtok(time_copy, ":");
  hours = strtoul(token, &remainder, 10);

  token = strtok(NULL, ":");
  minutes = strtoul(token, &remainder, 10);

  token = strtok(NULL, ":");
  seconds = strtoul(token, &remainder, 10);

  free(time_copy);  

  unsigned long total_seconds = hours * 3600 + minutes * 60 + seconds;
  return total_seconds;
}

int main() {
  const char* time_string1 = "10:12:50";
  unsigned long total_seconds1 = compute_total_seconds(time_string1);
  printf("Time String: %s\n", time_string1);
  printf("Total Seconds: %lu\n", total_seconds1);

  const char* time_string2 = "13:10:40";
  unsigned long total_seconds2 = compute_total_seconds(time_string2);
  printf("Time String: %s\n", time_string2);
  printf("Total Seconds: %lu\n", total_seconds2);

  return 0;
}


2.#include <stdio.h>

struct complex {
    float real;
    float imag;
};

void read_complex(struct complex *c) {
    printf("Enter the real part of the complex number: ");
    scanf("%f", &c->real);
    printf("Enter the imaginary part of the complex number: ");
    scanf("%f", &c->imag);
}

void write_complex(struct complex c) {
    printf("The complex number is %.2f + %.2fi\n", c.real, c.imag);
}

struct complex add_complex(struct complex c1, struct complex c2) {
    struct complex sum;
    sum.real = c1.real + c2.real;
    sum.imag = c1.imag + c2.imag;
    return sum;
}

struct complex multiply_complex(struct complex c1, struct complex c2) {
    struct complex product;
    product.real = c1.real * c2.real - c1.imag * c2.imag;
    product.imag = c1.real * c2.imag + c1.imag * c2.real;
    return product;
}

int main() {
    struct complex c1, c2, sum, product;
    printf("Enter the first complex number:\n");
    read_complex(&c1);

    printf("Enter the second complex number:\n");
    read_complex(&c2);

    sum = add_complex(c1, c2);

    printf("\nSum of the complex numbers:\n");
    write_complex(sum);

   
    product = multiply_complex(c1, c2);

    printf("\nProduct of the complex numbers:\n");
    write_complex(product);

    return 0;
}

3.#include <stdio.h>

struct time {
    int hours;
    int minutes;
    int seconds;
};

void diff_between_time(struct time t1, struct time t2, struct time *diff) {
    diff->hours = t2.hours - t1.hours;
    diff->minutes = t2.minutes - t1.minutes;
    diff->seconds = t2.seconds - t1.seconds;

    if (diff->seconds < 0) {
        diff->seconds += 60;
        diff->minutes--;
    }

    if (diff->minutes < 0) {
        diff->minutes += 60;
        diff->hours--;
    }
}

int main() {
    struct time t1, t2, diff;

    
    printf("Enter the first time period (hh:mm:ss): ");
    scanf("%d:%d:%d", &t1.hours, &t1.minutes, &t1.seconds);

    
    printf("Enter the second time period (hh:mm:ss): ");
    scanf("%d:%d:%d", &t2.hours, &t2.minutes, &t2.seconds);

   
    diff_between_time(t1, t2, &diff);

    printf("The difference between the two time periods is %d:%d:%d\n", diff.hours, diff.minutes, diff.seconds);

    return 0;
}

4.#include <stdio.h>
#include <stdlib.h>

struct Student {
    char name[50];
    int roll_number;
    float marks;
    int age;
};

int main() {
    int n;
    struct Student *students;

    printf("Enter the number of students: ");
    scanf("%d", &n);

    
    students = (struct Student *)malloc(n * sizeof(struct Student));

   
    for (int i = 0; i < n; i++) {
        printf("\nEnter details for student %d:\n", i + 1);

        printf("Enter name: ");
        scanf("%s", students[i].name);

        printf("Enter age: ");
        scanf("%d", &students[i].age);
        
        printf("Enter roll number: ");
        scanf("%d", &students[i].roll_number);

        printf("Enter marks: ");
        scanf("%f", &students[i].marks);

        
    }

    printf("\nStudent details:\n");
    for (int i = 0; i < n; i++) {
        printf("\nDetails for student %d:\n", i + 1);
        printf("Name: %s\n", students[i].name);
        printf("Age: %d\n", students[i].age);
        printf("Roll number: %d\n", students[i].roll_number);
        printf("Marks: %.2f\n", students[i].marks);
        
    }

    free(students);

    return 0;
}

5.#include <stdio.h>
#include <stdlib.h>

struct Student {
    char name[50];
    int roll_number;
    float marks;
    int age;
};

int main() {
    int n;
    struct Student *students;

    printf("Enter the number of students: ");
    scanf("%d", &n);

    
    students = (struct Student *)malloc(n * sizeof(struct Student));

   
    for (int i = 0; i < n; i++) {
        printf("\nEnter details for student %d:\n", i + 1);

        printf("Enter name: ");
        scanf("%s", students[i].name);

        printf("Enter age: ");
        scanf("%d", &students[i].age);
        
        printf("Enter roll number: ");
        scanf("%d", &students[i].roll_number);

        printf("Enter marks: ");
        scanf("%f", &students[i].marks);

        
    }

    printf("\nStudent details:\n");
    for (int i = 0; i < n; i++) {
        printf("\nDetails for student %d:\n", i + 1);
        printf("Name: %s\n", students[i].name);
        printf("Age: %d\n", students[i].age);
        printf("Roll number: %d\n", students[i].roll_number);
        printf("Marks: %.2f\n", students[i].marks);
        
    }

    free(students);

    return 0;
}
