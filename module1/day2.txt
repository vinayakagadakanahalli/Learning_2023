#include<stdio.h>
int main() {
    int sum=0,i;
    int a[5]={10,20,30,40,50};
    for(i=0;i<5;i+=2) {
        sum=sum+a[i];
    }
    printf("sum=%d",sum);
}


2.#include <stdio.h>

// Generic swap function
void swap(void* a, void* b, size_t size) {
    char* temp = (char*)malloc(size); // Allocate memory for temporary storage
    memcpy(temp, a, size); // Copy data from 'a' to 'temp'
    memcpy(a, b, size); // Copy data from 'b' to 'a'
    memcpy(b, temp, size); // Copy data from 'temp' to 'b'
    free(temp); // Free the temporary memory
}

int main() {
    int a = 10;
    int b = 20;
    printf("Before swapping: a = %d, b = %d\n", a, b);
    swap(&a, &b, sizeof(int));
    printf("After swapping: a = %d, b = %d\n", a, b);
    char c = 'X';
    char d = 'Y';
    printf("Before swapping: c = %c, d = %c\n", c, d);
    swap(&c, &d, sizeof(char));
    printf("After swapping: c = %c, d = %c\n", c, d);

    return 0;
}


3.#include <stdio.h>

void printExponent(double x) {
    unsigned long long* ptr = (unsigned long long*)&x;
    unsigned long long exponent = (*ptr >> 52) & 0x7FF;
    printf("Exponent in hexadecimal: 0x%llx\n", exponent);
    printf("Exponent in binary: 0b");
    for (int i = 10; i >= 0; i--) {
        printf("%d", (exponent >> i) & 1);
    }
    printf("\n");
}

int main() {
    double x = 0.7;
    printExponent(x);
    return 0;
}

